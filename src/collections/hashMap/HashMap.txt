HashMap extends AbstractMap class and implements Cloneable and Serializable interfaces
HashMap can have multiple null values and only one null key.
HashMap is not synchronized. To get the synchronized HashMap, use Collections.synchronizedMap() method.
HashMap gives constant time performance for the operations like get() and put() methods.
Default initial capacity of HashMap is 16.
HashMap, handles null key differently. For the null key, default value of hashcode is 0 and the first bin/bucket will be used to place it as per the HashMap implementation


HashMap internally does Object equality instead of reference equality, whereas IdentityHashMap does Reference equality


Difference between HashMap and IdentityHashMap ?
In HashMap :    Two keys are considered equal  if and only if (k1==null ? k2==null  : k1.equals(k2))
// object equality i.e using "==" as well as "equals()"" method to compare objects
In IdentityHashMap :    Two keys are considered equal  if and only if (k1 == k2)
//reference equality  i.e  using == operator  to compare objects
That's why while using HashMap we should override equals method for custom objects as key.




Mutable Key issue in HashMap
/**
 * In the below example, we have created a HashMap Object "hashMap" and a MutableKey object "key"
 * Hashcode of "key" is 1291
 * Now, if we will insert the "key" into the "hasMap" then it will be mapped to 11th bucket
 * as default size of map is 16 and 1291 % 16 = 11
 *
 * Case 1: After modification key is mapped to different Bucket
 *      Now we are modifying the state of key, Here hashcode also got changed and i.e. 2241
 *      so 2241 % 16 = 1
 *      Now if we will do "hashMap.containsKey(key)" it will first calculate the hashcode of key i.e. 2241
 *      and then check in bucket 1 where "key" will not be there.
 *      So , Mutable Key in HashMap is Dangerous..
 *      When HashMap will be saving key in bucket then it will save the hashcode value at that time
 * case 2: After modification key is mapped to same Bucket
 *      Now we are modifying the state of key, Here hashcode also got changed and i.e. 1931
 *      so 1931 % 16 = 11 (same bucket)
 *      When HashMap will be saving key in bucket then it will save the hashcode value at that time
 *      Now if we will do "hashMap.containsKey(key)" it will also give false
 *      as while checking or fetching by key, Hashmap will compare the  hashcode too.
 */